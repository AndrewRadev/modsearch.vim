*modsearch.txt*	Modify the last search in various predefined ways

==============================================================================
CONTENTS                                        *modsearch*   *modsearch-contents*

    Installation................................: |modsearch-installation|
    Usage.......................................: |modsearch-usage|
    Settings....................................: |modsearch-settings|
    Issues......................................: |modsearch-issues|


==============================================================================
INSTALLATION                                            *modsearch-installation*

There are several ways to install the plugin. The recommended one is by using
Tim Pope's pathogen (http://www.vim.org/scripts/script.php?script_id=2332). In
that case, you can clone the plugin's git repository like so:
>
    git clone git://github.com/AndrewRadev/modsearch.vim.git ~/.vim/bundle/modsearch
<
If your vim configuration is under git version control, you could also set up
the repository as a submodule, which would allow you to update more easily.
The command is (provided you're in ~/.vim):
>
    git submodule add git://github.com/AndrewRadev/modsearch.vim.git bundle/modsearch
<

Another way is to simply copy all the essential directories inside the ~/.vim
directory: autoload, doc, plugin.


==============================================================================
USAGE                                               *:Modsearch* *modsearch-usage*

The plugin exposes a single command, |:Modsearch|, which modifies the last
performed search in a particular way, determined by its argument. For
instance, after:
>
    /foobar
    :Modsearch word
<
The current search term will now be not "foobar", but "\<foobar\>". You can
use the `unword` modifier to remove the word limitation.

Currently, the available commands are:

- `word`: Wraps the last search term in word boundaries
- `unword`: Removes word boundaries from the last search term
- `ignore-syntax-comment`: Changes the search to ignore comments
- `ignore-syntax-string`: Changes the search to ignore strings

For the modifiers that ignore comments and strings, bear in mind that the
pattern is invalidated if the buffer is changed. That's because they're
implemented by specifically excluding particular line/column pairs.


==============================================================================
SETTINGS                                                    *modsearch-settings*

TODO

==============================================================================
ISSUES                                                        *modsearch-issues*

Any issues and suggestions are very welcome on the github bugtracker:
https://github.com/AndrewRadev/modsearch.vim/issues


vim:tw=78:sw=4:ft=help:norl:
